GET     /_internal_/healthcheck                                   controllers.Healthchecks.index()

GET     /                                                         controllers.Application.index(page: Int ?= 0)

GET     /login                                                    controllers.LoginController.redirect
GET     /login/                                                   controllers.LoginController.index(return_url: Option[String] ?= None)
POST    /login/                                                   controllers.LoginController.postIndex

GET     /logout                                                   controllers.LogoutController.index
GET     /logout/                                                  controllers.LogoutController.index
GET     /logout/confirmation                                      controllers.LogoutController.confirmation

GET     /:org                                                     controllers.Dashboard.index(org: String, agendaItemsPage: Int ?= 0)
GET     /:org/incidents/                                          controllers.Incidents.index(org: String, team_key: Option[String] ?= None, has_team: Option[String] ?= None, has_plan: Option[String] ?= None, has_grade: Option[String] ?= None, page: Int ?= 0)
GET     /:org/incidents/create                                    controllers.Incidents.create(org: String, teamKey: Option[String] ?= None)
POST    /:org/incidents/postCreate                                controllers.Incidents.postCreate(org: String)
GET     /:org/incidents/:id/edit                                  controllers.Incidents.edit(org: String, id: Long)
POST    /:org/incidents/:id/postEdit                              controllers.Incidents.postEdit(org: String, id: Long)
GET     /:org/incidents/:id/move                                  controllers.Incidents.move(org: String, id: Long)
POST    /:org/incidents/:id/postMove                              controllers.Incidents.postMove(org: String, id: Long)
POST    /:org/incidents/:id/delete                                controllers.Incidents.postDeleteById(org: String, id: Long)
GET     /:org/incidents/:id                                       controllers.Incidents.show(org: String, id: Long, agendaItemsPage: Int ?= 0, meetingId: Option[Long] ?= None)

GET     /:org/plans/:id                                           controllers.Plans.getById(org: String, id: Long)
GET     /:org/plans/uploadByIncidentId/:incident_id               controllers.Plans.uploadByIncidentId(org: String, incident_id: Long)
POST    /:org/plans/uploadByIncidentId/:incident_id               controllers.Plans.postUploadByIncidentId(org: String, incident_id: Long)
POST    /:org/plans/postNoPlan/:incident_id                       controllers.Plans.postNoPlan(org: String, incident_id: Long)
POST    /:org/plans/deleteById/:id                                controllers.Plans.postDeleteById(org: String, id: Long, incident_id: Long)
POST    /:org/plans/grade/:id                                     controllers.Plans.postGrade(org: String, id: Long, score: Int)

GET     /:org/teams/                                              controllers.Teams.index(org: String, key: Option[String] ?= None, myPage: Int ?= 0, otherPage: Int ?= 0)
GET     /:org/teams/create                                        controllers.Teams.create(org: String)
POST    /:org/teams/postCreate                                    controllers.Teams.postCreate(org: String)
GET     /:org/teams/edit                                          controllers.Teams.edit(org: String, key: String)
POST    /:org/teams/postEdit                                      controllers.Teams.postEdit(org: String, key: String)
GET     /:org/teams/:key                                          controllers.Teams.show(org: String, key: String, agendaItemsPage: Int ?= 0, membersPage: Int ?= 0)
POST    /:org/teams/delete/:key                                   controllers.Teams.postDeleteByKey(org: String, key: String)

GET     /:org/teams/:key/member_summary                           controllers.TeamMembers.memberSummary(org: String, key: String)
GET     /:org/teams/:key/members/add                              controllers.TeamMembers.add(org: String, key: String)
POST    /:org/teams/:key/members/postAdd                          controllers.TeamMembers.postAdd(org: String, key: String)
POST    /:org/teams/:key/members/postJoin                         controllers.TeamMembers.postJoin(org: String, key: String)
POST    /:org/teams/:key/members/postRemove                       controllers.TeamMembers.postRemove(org: String, key: String, userGuid: Option[java.util.UUID] ?= None)

GET     /:org/subscriptions/                                      controllers.Subscriptions.index(org: String)
POST    /:org/subscriptions/:publication/toggle                   controllers.Subscriptions.postToggle(org: String, publication: com.gilt.quality.v0.models.Publication)

GET     /:org/meetings/                                           controllers.Meetings.index(org: String, page: Int ?= 0)
GET     /:org/meetings/:id                                        controllers.Meetings.show(org: String, id: Long, reviewTeamsPage: Int ?= 0, reviewPlansPage: Int ?= 0)
POST    /:org/meetings/:id/delete                                 controllers.Meetings.postDeleteById(org: String, id: Long)
POST    /:org/meetings/:id/adjourn                                controllers.Meetings.postAdjournById(org: String, id: Long)

GET     /:org/emails/meeting_adjourned/:meeting_id                controllers.EmailsController.meetingAdjourned(org: String, meeting_id: Long)

# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file                                             controllers.Assets.at(path="/public", file)

