GET        /_internal_/healthcheck                                controllers.Healthchecks.get()
GET        /organizations                                         controllers.Organizations.get(id: Option[Long], key: Option[String], limit: Int ?= 25, offset: Int ?= 0)
GET        /organizations/:key                                    controllers.Organizations.getByKey(key: String)
POST       /organizations                                         controllers.Organizations.post()
DELETE     /organizations/:key                                    controllers.Organizations.deleteByKey(key: String)
GET        /subscriptions                                         controllers.Subscriptions.get(id: Option[Long], organization_key: Option[String], user_guid: Option[java.util.UUID], publication: Option[com.gilt.quality.models.Publication], limit: Int ?= 25, offset: Int ?= 0)
GET        /subscriptions/:id                                     controllers.Subscriptions.getById(id: Long)
POST       /subscriptions                                         controllers.Subscriptions.post()
DELETE     /subscriptions/:id                                     controllers.Subscriptions.deleteById(id: Long)
GET        /users                                                 controllers.Users.get(guid: Option[java.util.UUID], email: Option[String])
GET        /users/:guid                                           controllers.Users.getByGuid(guid: java.util.UUID)
POST       /users/authenticate                                    controllers.Users.postAuthenticate()
POST       /users                                                 controllers.Users.post()
GET        /:org/agenda_items                                     controllers.AgendaItems.getByOrg(org: String, id: Option[Long], meeting_id: Option[Long], incident_id: Option[Long], team_key: Option[String], is_adjourned: Option[Boolean], task: Option[com.gilt.quality.models.Task], limit: Int ?= 25, offset: Int ?= 0)
GET        /:org/agenda_items/:id                                 controllers.AgendaItems.getByOrgAndId(org: String, id: Long)
POST       /:org/agenda_items                                     controllers.AgendaItems.postByOrg(org: String)
DELETE     /:org/agenda_items/:id                                 controllers.AgendaItems.deleteByOrgAndId(org: String, id: Long)
GET        /:org/email_messages/meeting_adjourned/:meeting_id     controllers.EmailMessages.getMeetingAdjournedByOrgAndMeetingId(org: String, meeting_id: Long)
GET        /:org/events                                           controllers.Events.getByOrg(org: String, model: Option[com.gilt.quality.models.Model], action: Option[com.gilt.quality.models.Action], number_hours: Option[Int], limit: Int ?= 25, offset: Int ?= 0)
GET        /:org/incidents                                        controllers.Incidents.getByOrg(org: String, id: Option[Long], team_key: Option[String], has_team: Option[Boolean], has_plan: Option[Boolean], has_grade: Option[Boolean], limit: Int ?= 25, offset: Int ?= 0)
GET        /:org/incidents/:id                                    controllers.Incidents.getByOrgAndId(org: String, id: Long)
POST       /:org/incidents                                        controllers.Incidents.postByOrg(org: String)
PUT        /:org/incidents/:id                                    controllers.Incidents.putByOrgAndId(org: String, id: Long)
DELETE     /:org/incidents/:id                                    controllers.Incidents.deleteByOrgAndId(org: String, id: Long)
GET        /:org/meetings                                         controllers.Meetings.getByOrg(org: String, id: Option[Long], incident_id: Option[Long], agenda_item_id: Option[Long], limit: Int ?= 25, offset: Int ?= 0)
GET        /:org/meetings/:id                                     controllers.Meetings.getByOrgAndId(org: String, id: Long)
POST       /:org/meetings                                         controllers.Meetings.postByOrg(org: String)
POST       /:org/meetings/:id/adjourn                             controllers.Meetings.postAdjournByOrgAndId(org: String, id: Long)
DELETE     /:org/meetings/:id                                     controllers.Meetings.deleteByOrgAndId(org: String, id: Long)
GET        /:org/meetings/:id/pager/:incident_id                  controllers.Meetings.getPagerByOrgAndIdAndIncidentId(org: String, id: Long, incident_id: Long)
GET        /:org/plans                                            controllers.Plans.getByOrg(org: String, id: Option[Long], incident_id: Option[Long], team_key: Option[String], limit: Int ?= 25, offset: Int ?= 0)
POST       /:org/plans                                            controllers.Plans.postByOrg(org: String)
PUT        /:org/plans/:id                                        controllers.Plans.putByOrgAndId(org: String, id: Long)
PUT        /:org/plans/:id/grade                                  controllers.Plans.putGradeByOrgAndId(org: String, id: Long)
GET        /:org/plans/:id                                        controllers.Plans.getByOrgAndId(org: String, id: Long)
DELETE     /:org/plans/:id                                        controllers.Plans.deleteByOrgAndId(org: String, id: Long)
GET        /:org/statistics                                       controllers.Statistics.getByOrg(org: String, team_key: Option[String], number_hours: Int ?= 168)
GET        /:org/teams                                            controllers.Teams.getByOrg(org: String, key: Option[String], user_guid: Option[java.util.UUID], exclude_user_guid: Option[java.util.UUID], limit: Int ?= 25, offset: Int ?= 0)
GET        /:org/teams/:key                                       controllers.Teams.getByOrgAndKey(org: String, key: String)
POST       /:org/teams                                            controllers.Teams.postByOrg(org: String)
PUT        /:org/teams/:key                                       controllers.Teams.putByOrgAndKey(org: String, key: String)
DELETE     /:org/teams/:key                                       controllers.Teams.deleteByOrgAndKey(org: String, key: String)
GET        /:org/teams/:key/members                               controllers.Teams.getMembersByOrgAndKey(org: String, key: String, user_guid: Option[java.util.UUID], limit: Int ?= 25, offset: Int ?= 0)
PUT        /:org/teams/:key/members/:user_guid                    controllers.Teams.putMembersByOrgAndKeyAndUserGuid(org: String, key: String, user_guid: java.util.UUID)
DELETE     /:org/teams/:key/members/:user_guid                    controllers.Teams.deleteMembersByOrgAndKeyAndUserGuid(org: String, key: String, user_guid: java.util.UUID)