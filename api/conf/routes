# Generated by apidoc - http://www.apidoc.me
# Service version: 0.1.11
# apidoc:0.9.11 http://www.apidoc.me/gilt/quality/0.1.11/play_2_x_routes

GET        /_internal_/healthcheck                                controllers.Healthchecks.getInternalAndHealthcheck()
POST       /incident_organization_changes                         controllers.IncidentOrganizationChanges.post()
GET        /organizations                                         controllers.Organizations.get(id: _root_.scala.Option[Long], key: _root_.scala.Option[String], limit: Int ?= 25, offset: Int ?= 0)
GET        /organizations/:key                                    controllers.Organizations.getByKey(key: String)
POST       /organizations                                         controllers.Organizations.post()
DELETE     /organizations/:key                                    controllers.Organizations.deleteByKey(key: String)
GET        /subscriptions                                         controllers.Subscriptions.get(id: _root_.scala.Option[Long], organization_key: _root_.scala.Option[String], user_guid: _root_.scala.Option[_root_.java.util.UUID], publication: _root_.scala.Option[com.gilt.quality.v0.models.Publication], limit: Int ?= 25, offset: Int ?= 0)
GET        /subscriptions/:id                                     controllers.Subscriptions.getById(id: Long)
POST       /subscriptions                                         controllers.Subscriptions.post()
DELETE     /subscriptions/:id                                     controllers.Subscriptions.deleteById(id: Long)
GET        /users                                                 controllers.Users.get(guid: _root_.scala.Option[_root_.java.util.UUID], email: _root_.scala.Option[String])
GET        /users/:guid                                           controllers.Users.getByGuid(guid: _root_.java.util.UUID)
POST       /users/authenticate                                    controllers.Users.postAuthenticate()
POST       /users                                                 controllers.Users.post()
GET        /:org/agenda_items                                     controllers.AgendaItems.getByOrg(org: String, id: _root_.scala.Option[Long], meeting_id: _root_.scala.Option[Long], incident_id: _root_.scala.Option[Long], team_key: _root_.scala.Option[String], user_guid: _root_.scala.Option[_root_.java.util.UUID], is_adjourned: _root_.scala.Option[Boolean], task: _root_.scala.Option[com.gilt.quality.v0.models.Task], limit: Int ?= 25, offset: Int ?= 0)
GET        /:org/agenda_items/:id                                 controllers.AgendaItems.getByOrgAndId(org: String, id: Long)
POST       /:org/agenda_items                                     controllers.AgendaItems.postByOrg(org: String)
DELETE     /:org/agenda_items/:id                                 controllers.AgendaItems.deleteByOrgAndId(org: String, id: Long)
GET        /:org/email_messages/meeting_adjourned/:meeting_id     controllers.EmailMessages.getMeetingAdjournedByOrgAndMeetingId(org: String, meeting_id: Long)
GET        /:org/external_services                                controllers.ExternalServices.getByOrg(org: String, id: _root_.scala.Option[Long], name: _root_.scala.Option[com.gilt.quality.v0.models.ExternalServiceName], limit: Int ?= 25, offset: Int ?= 0)
GET        /:org/external_services/:id                            controllers.ExternalServices.getByOrgAndId(org: String, id: Long)
POST       /:org/external_services                                controllers.ExternalServices.postByOrg(org: String)
DELETE     /:org/external_services/:id                            controllers.ExternalServices.deleteByOrgAndId(org: String, id: Long)
GET        /:org/incidents                                        controllers.Incidents.getByOrg(org: String, id: _root_.scala.Option[Long], team_key: _root_.scala.Option[String], has_team: _root_.scala.Option[Boolean], has_plan: _root_.scala.Option[Boolean], has_grade: _root_.scala.Option[Boolean], limit: Int ?= 25, offset: Int ?= 0)
GET        /:org/incidents/:id                                    controllers.Incidents.getByOrgAndId(org: String, id: Long)
POST       /:org/incidents                                        controllers.Incidents.postByOrg(org: String)
PUT        /:org/incidents/:id                                    controllers.Incidents.putByOrgAndId(org: String, id: Long)
DELETE     /:org/incidents/:id                                    controllers.Incidents.deleteByOrgAndId(org: String, id: Long)
GET        /:org/meetings                                         controllers.Meetings.getByOrg(org: String, id: _root_.scala.Option[Long], incident_id: _root_.scala.Option[Long], agenda_item_id: _root_.scala.Option[Long], is_adjourned: _root_.scala.Option[Boolean], is_upcoming: _root_.scala.Option[Boolean], order_by: _root_.scala.Option[String], limit: Int ?= 25, offset: Int ?= 0)
GET        /:org/meetings/:id                                     controllers.Meetings.getByOrgAndId(org: String, id: Long)
POST       /:org/meetings                                         controllers.Meetings.postByOrg(org: String)
POST       /:org/meetings/:id/adjourn                             controllers.Meetings.postAdjournByOrgAndId(org: String, id: Long)
DELETE     /:org/meetings/:id                                     controllers.Meetings.deleteByOrgAndId(org: String, id: Long)
GET        /:org/meetings/:id/pager/:incident_id                  controllers.Meetings.getPagerByOrgAndIdAndIncidentId(org: String, id: Long, incident_id: Long)
GET        /:org/plans                                            controllers.Plans.getByOrg(org: String, id: _root_.scala.Option[Long], incident_id: _root_.scala.Option[Long], team_key: _root_.scala.Option[String], limit: Int ?= 25, offset: Int ?= 0)
POST       /:org/plans                                            controllers.Plans.postByOrg(org: String)
PUT        /:org/plans/:id                                        controllers.Plans.putByOrgAndId(org: String, id: Long)
PUT        /:org/plans/:id/grade                                  controllers.Plans.putGradeByOrgAndId(org: String, id: Long)
GET        /:org/plans/:id                                        controllers.Plans.getByOrgAndId(org: String, id: Long)
DELETE     /:org/plans/:id                                        controllers.Plans.deleteByOrgAndId(org: String, id: Long)
GET        /:org/statistics                                       controllers.Statistics.getByOrg(org: String, team_key: _root_.scala.Option[String], number_hours: Int ?= 168)
GET        /:org/teams                                            controllers.Teams.getByOrg(org: String, key: _root_.scala.Option[String], user_guid: _root_.scala.Option[_root_.java.util.UUID], exclude_user_guid: _root_.scala.Option[_root_.java.util.UUID], limit: Int ?= 25, offset: Int ?= 0)
GET        /:org/teams/:key                                       controllers.Teams.getByOrgAndKey(org: String, key: String)
POST       /:org/teams                                            controllers.Teams.postByOrg(org: String)
PUT        /:org/teams/:key                                       controllers.Teams.putByOrgAndKey(org: String, key: String)
DELETE     /:org/teams/:key                                       controllers.Teams.deleteByOrgAndKey(org: String, key: String)
GET        /:org/teams/:key/member_summary                        controllers.Teams.getMemberSummaryByOrgAndKey(org: String, key: String)
GET        /:org/teams/:key/members                               controllers.Teams.getMembersByOrgAndKey(org: String, key: String, user_guid: _root_.scala.Option[_root_.java.util.UUID], limit: Int ?= 25, offset: Int ?= 0)
PUT        /:org/teams/:key/members/:user_guid                    controllers.Teams.putMembersByOrgAndKeyAndUserGuid(org: String, key: String, user_guid: _root_.java.util.UUID)
DELETE     /:org/teams/:key/members/:user_guid                    controllers.Teams.deleteMembersByOrgAndKeyAndUserGuid(org: String, key: String, user_guid: _root_.java.util.UUID)