{
    "name": "Quality",
    "apidoc": {
	"version": "0.9.11"
    },
    "description": "Application to track perfect day and quality at gilt",
    "base_url": "http://api.quality.architecture.giltaws.com",

    "enums": {
	"severity": {
	    "values": [
		{ "name": "low" },
		{ "name": "high" }
	    ]
	},

	"task": {
	    "description": "Describes what needs to be reviewed about a specific incident",
	    "values": [
		{ "name": "review_team", "description": "Used in meetings to indicate that a team should be assigned to the incident or that the group should review the team assignment to make sure it is correct." },
		{ "name": "review_plan", "description": "Indicates that the incident plan should be reviewed and rated" }
	    ]
	},

	"publication": {
	    "description": "A publication represents something that a user can subscribe to. An example would be subscribing via email to the publication of all new incidents.",
	    "values": [
		{ "name": "incidents.create", "description": "Email notification whenever an incident is created." },
		{ "name": "incidents.update", "description": "Email notification whenever an incident is updated." },
		{ "name": "plans.create", "description": "Email notification whenever a plan is created." },
		{ "name": "plans.update", "description": "Email notification whenever a plan is updated." },
		{ "name": "meetings.adjourned", "description": "Email notification whenever a meeting is adjourned." },
		{ "name": "incidents.team_update", "description": "Email notification whenever a team that you are on is assigned to an incident." }
	    ]
	},

	"external_service_name": {
	    "description": "An external service with which an organization can integrate.",
	    "values": [
		{ "name": "jira", "description": "Atlassian JIRA. If integration is enabled, an incident can be created by listing the jira ISSUE number directly." }
	    ]
	},

	"response": {
	    "values": [
		{ "name": "Complete" },
		{ "name": "Not Yet" },
		{ "name": "Will not complete" }
	    ]
	}

    },

    "models": {

	"healthcheck": {
	    "fields": [
                { "name": "status", "type": "string", "example": "healthy" }
	    ]
	},

        "organization": {
            "description": "Top level organization for which we are managing quality. Key entities like teams and meetings are scoped to the organization.",
            "fields": [
                { "name": "key", "type": "string", "description": "Used as a unique key for this organization that is URL safe." },
                { "name": "name", "type": "string", "description": "The name of this organization." }
            ]
        },

        "organization_form": {
            "fields": [
                { "name": "name", "type": "string" },
                { "name": "key", "type": "string", "required": false, "description": "Defaults to a url friendy version of the name" }
            ]
        },

        "team": {
            "description": "A team is the main actor in the system. Teams have a unique key and own incidents",
            "fields": [
                { "name": "organization", "type": "organization", "description": "Organization to which this team belongs" },
                { "name": "key", "type": "string", "description": "Unique identifier for this team" },
                { "name": "email", "type": "string", "description": "Email address for members of this team. If provided, used to send updates on new incidents, meetings, etc.", "required": false },
                { "name": "icons", "type": "icons", "description": "Set of icons used on the site for this team (e.g. smiley and frowney faces). Teams inherit a default set of icons if not otherwise provided." }
            ]
        },

        "team_form": {
            "fields": [
                { "name": "key", "type": "string", "description": "Unique identifier for this team" },
                { "name": "email", "type": "string", "required": false },
                { "name": "smiley_url", "type": "string", "required": false },
                { "name": "frowny_url", "type": "string", "required": false }
            ]
        },

	"team_member": {
            "fields": [
                { "name": "team", "type": "team" },
                { "name": "user", "type": "user" }
            ]
        },

        "team_member_summary": {
            "description": "Statistics on each team's quality metrics, number of issues",
            "fields": [
                { "name": "team", "type": "team" },
		{ "name": "number_members", "type": "long" }
	    ]
	},

        "update_team_form": {
            "fields": [
                { "name": "key", "type": "string", "required": false, "description": "If specified, changes the team key to this value" },
                { "name": "email", "type": "string", "required": false },
                { "name": "smiley_url", "type": "string", "required": false },
                { "name": "frowny_url", "type": "string", "required": false }
            ]
        },

	"icons": {
            "description": "URLs to key icons used through the application",
            "fields": [
                { "name": "smiley_url", "type": "string", "description": "URL for the smiley icon" },
                { "name": "frowny_url", "type": "string", "description": "URL for the frowny icon" }
	    ]
	},

        "statistic": {
            "description": "Statistics on each team's quality metrics, number of issues",
            "fields": [
                {"name": "team", "type": "team", "description": "Team for statistics."},
                {"name": "total_grades", "type": "long", "description": "Number of graded plans given time span requested."},
                {"name": "average_grade", "type": "integer", "description": "Average grade for graded plans given time span requested.", "required": false},
                {"name": "total_open_incidents", "type": "long", "description": "Number of incidents without a plan for this team."},
                {"name": "total_incidents", "type": "long", "description": "Number of incidents reported in the time span requested."},
                {"name": "total_plans", "type": "long", "description": "Number of plans attached to reported incidents in the time span requested."},
                {"name": "plans", "type": "[plan]", "description": "Last plans to display grades for.", "required": false}
            ]
        },

        "incident": {
            "description": "A bug or error that affected public or internal users in a negative way",
            "fields": [
                { "name": "id", "type": "long", "description": "Internal unique identifier for this incident." },
                { "name": "organization", "type": "organization", "description": "Organization to which this incident belongs" },
                { "name": "summary", "type": "string", "description": "Summary of the incident." },
                { "name": "description", "type": "string", "description": "Full description of the incident", "required": false },
                { "name": "team", "type": "team", "description": "Team responsible for resolution of this incident", "required": false },
                { "name": "severity", "type": "severity" },
                { "name": "tags", "type": "[string]", "required": false, "description": "Optional list of tags to apply to this incident" },
                { "name": "plan", "type": "plan", "required": false },
                { "name": "created_at", "type": "date-time-iso8601" }
            ]
        },

	"incident_form": {
	    "fields": [
		{ "name": "team_key", "type": "string", "description": "Team responsible for resolution of this incident", "required": false },
		{ "name": "severity", "type": "severity" },
		{ "name": "summary", "type": "string", "description": "Summary of the incident." },
		{ "name": "description", "type": "string", "description": "Full description of the incident", "required": false },
		{ "name": "tags", "type": "[string]", "description": "Optional list of tags to apply to this incident", "required": false }
	    ]
	},

        "plan": {
            "description": "Details for how an incident will be resolved",
            "fields": [
                { "name": "id", "type": "long", "description": "Internal unique identifier for this incident." },
                { "name": "incident_id", "type": "long" },
                { "name": "body", "type": "string", "description": "Full description of the incident" },
                { "name": "grade", "type": "integer", "required": false, "minimum": 0, "maximum": 100, "description": "Grade given to this plan on a scale of 0 (bad) to 100 (good)" },
                { "name": "created_at", "type": "date-time-iso8601" }
            ]
        },

	"plan_form": {
            "fields": [
                { "name": "incident_id", "type": "long" },
                { "name": "body", "type": "string" }
            ]
	},

        "error": {
            "fields": [
                { "name": "code", "type": "string", "description": "Machine readable code for this specific error message" },
                { "name": "message", "type": "string", "description": "Description of the error" }
            ]
        },

	"meeting": {
	    "description": "Meetings happen on a regular schedule (e.g. thursdays from 11-12 EST). As incidents are created, they are automatically assigned to the next meeting. Incidents can then be reviewed from the context of a meeting, facilitating online navigation. Incidents within a meeting can require one of two actions - team assignment or plan review.",
	    "fields": [
		{ "name": "id", "type": "long", "description": "Internal unique identifier for this meeting." },
                { "name": "organization", "type": "organization", "description": "Organization to which this meeting belongs" },
		{ "name": "scheduled_at", "type": "date-time-iso8601", "description": "The date and time for which this meeting is scheduled." },
		{ "name": "adjourned_at", "type": "date-time-iso8601", "description": "The date and time at which this meeting was adjourned. This can be done explicitly by a person, or will automatically occur a few hours after the meeting's scheduled time.", "required": false }
	    ]
	},

	"meeting_form": {
	    "fields": [
		{ "name": "scheduled_at", "type": "date-time-iso8601" }
	    ]
	},

	"adjourn_form": {
	    "fields": [
		{ "name": "adjourned_at", "type": "date-time-iso8601", "required": false, "description": "Defaults to the time of the request" }
	    ]
	},

	"meeting_pager": {
	    "description": "Used to enable pagination when walking through the issues in a particular meeting. General idea is given a meeting id and an incident id, returns the previous and next incident IDs, if any",
	    "fields": [
		{ "name": "meeting", "type": "meeting" },
		{ "name": "prior_incident", "type": "incident", "required": false },
		{ "name": "next_incident", "type": "incident", "required": false }
	    ]
	},

	"agenda_item": {
	    "description": "Describe an agenda item for a meeting. Currently the only agenda items we have are that a particular incident needs to be reviewed.",
	    "fields": [
		{ "name": "id", "type": "long", "description": "Internal unique identifier for this record." },
		{ "name": "meeting", "type": "meeting", "description": "The meeting to which this agenda item belongs" },
		{ "name": "incident", "type": "incident", "description": "Summary of the incident to review." },
		{ "name": "task", "type": "task", "description": "What needs to be reviewed at this meeting for this incident." }
	    ]
	},

	"incident_summary": {
	    "fields": [
		{ "name": "id", "type": "long" },
		{ "name": "severity", "type": "severity" },
                { "name": "summary", "type": "string" }
	    ]
	},

	"agenda_item_form": {
	    "fields": [
		{ "name": "meeting_id", "type": "long" },
		{ "name": "incident_id", "type": "long" },
		{ "name": "task", "type": "task" }
	    ]
	},

        "user": {
            "description": "A user is a top level person.",
            "fields": [
                { "name": "guid", "type": "uuid", "description": "Internal unique identifier for this user." },
                { "name": "email", "type": "string" }
            ]
        },

        "user_form": {
	    "fields": [
                { "name": "email", "type": "string" }
            ]
	},

        "authentication_form": {
	    "fields": [
                { "name": "email", "type": "string" }
            ]
	},

	"subscription": {
	    "description": "Represents a user that is currently subscribed to a publication",
	    "fields": [
		{ "name": "id", "type": "long", "description": "Internal unique identifier for this subscription record" },
		{ "name": "organization", "type": "organization" },
		{ "name": "user", "type": "user" },
		{ "name": "publication", "type": "publication" }
	    ]
	},

	"subscription_form": {
	    "fields": [
		{ "name": "organization_key", "type": "string" },
		{ "name": "user_guid", "type": "uuid" },
		{ "name": "publication", "type": "publication" }
	    ]
	},

	"email_message": {
	    "fields": [
		{ "name": "subject", "type": "string" },
		{ "name": "body", "type": "string" }
	    ]
	},

	"external_service": {
	    "description": "Stores metadata about external services that can be integrated with the quality app",
	    "fields": [
		{ "name": "id", "type": "long" },
		{ "name": "organization", "type": "organization" },
		{ "name": "name", "type": "external_service_name" },
		{ "name": "url", "type": "string" },
		{ "name": "username", "type": "string" }
	    ]
	},

	"external_service_form": {
	    "fields": [
		{ "name": "name", "type": "external_service_name" },
		{ "name": "url", "type": "string" },
		{ "name": "username", "type": "string" },
		{ "name": "password", "type": "string" }
	    ]
	},

	"incident_organization_change": {
	    "description": "Used to move an incident to another organization",
	    "fields": [
		{ "name": "incident_id", "type": "long" },
		{ "name": "organization_key", "type": "string" }
	    ]
	},

	"followup": {
	    "description": "Every n days (e.g. 30) we follow up to see if a given plan has been implemented. This gives teams the ability to say: Yes, completed. Not yet. or No, won't do. After 3 consecutive no replies, we assume not doing.",
	    "fields": [
		{ "name": "key", "type": "string", "description": "Unique token identifying this response" },
		{ "name": "plan", "type": "plan" },
		{ "name": "sent_at", "type": "date-time-iso8601" }
	    ]
	},

	"followup_response": {
	    "description": "Every n days (e.g. 30) we follow up to see if a given plan has been implemented. This gives teams the ability to say: Yes, completed. Not yet. or No, won't do. After 3 consecutive no replies, we assume not doing.",
	    "fields": [
		{ "name": "followup", "type": "followup" },
		{ "name": "response", "type": "response" },
		{ "name": "created_at", "type": "date-time-iso8601" },
		{ "name": "created_by", "type": "user" }
	    ]
	}

    },

    "resources": {

	"healthcheck": {
	    "path": "/_internal_/healthcheck",
            "operations": [
                {
                    "method": "GET",
                    "responses": {
                        "200": { "type": "healthcheck" }
                    }
                }
	    ]
	},

	"organization": {
	    "operations": [
		{
		    "method": "GET",
		    "description": "Search all organizations. Results are always paginated.",
                    "parameters": [
                        { "name": "id", "type": "long", "description": "Find organization with this id", "required": false },
                        { "name": "key", "type": "string", "description": "Find organization with this key", "required": false },
                        { "name": "limit", "type": "integer", "default": 25, "description": "The number of records to return", "minimum": 0, "maximum": 100 },
                        { "name": "offset", "type": "integer", "default": 0, "description": "Used to paginate. First page of results is 0.", "minimum": 0 }
                    ],
                    "responses": {
                        "200": { "type": "[organization]" }
                    }
                },

		{
		    "method": "GET",
		    "path": "/:key",
                    "responses": {
                        "200": { "type": "organization" },
                        "404": { "type": "unit" }
                    }
                },


		{
		    "method": "POST",
                    "body": { "type": "organization_form" },
                    "responses": {
                        "201": { "type": "organization" },
                        "409": { "type": "[error]" }
                    }
                },

		{
		    "method": "DELETE",
		    "path": "/:key"
                }

	    ]
	},

	"team": {
	    "path": "/:org/teams",
	    "operations": [
		{
		    "method": "GET",
		    "description": "Search all teams. Results are always paginated.",
                    "parameters": [
                        { "name": "key", "type": "string", "description": "Find team with this key. Exact match", "required": false },
			{ "name": "user_guid", "type": "uuid", "description": "Find teams that this user is a member of.", "required": false },
			{ "name": "exclude_user_guid", "type": "uuid", "description": "Find teams that this user is NOT a member of.", "required": false },
                        { "name": "limit", "type": "integer", "default": 25, "description": "The number of records to return", "minimum": 0, "maximum": 100 },
                        { "name": "offset", "type": "integer", "default": 0, "description": "Used to paginate. First page of results is 0.", "minimum": 0 }
                    ],
                    "responses": {
                        "200": { "type": "[team]" },
                        "404": { "type": "unit", "description": "404 if org is not found / or user does not have access to the specified org" }
                    }
                },

                {
                    "method": "GET",
                    "description": "Returns information about the team with this specific key.",
                    "path": "/:key",
                    "responses": {
                        "200": { "type": "team" },
                        "404": { "type": "unit" }
                    }
                },

                {
                    "method": "POST",
                    "description": "Create a new team.",
                    "body": { "type": "team_form" },
                    "responses": {
                        "201": { "type": "team" },
                        "409": { "type": "[error]" }
                    }
                },

                {
                    "method": "PUT",
		    "path": "/:key",
                    "description": "Update a team.",
                    "body": { "type": "update_team_form" },
                    "responses": {
                        "200": { "type": "team" },
                        "409": { "type": "[error]" }
                    }
                },

		{
		    "method": "DELETE",
                    "path": "/:key"
		},

                {
                    "method": "GET",
		    "path": "/:key/member_summary",
                    "description": "Summary information about this teams members",
                    "responses": {
                        "200": { "type": "team_member_summary" },
                        "404": { "type": "unit" }
                    }
                },

                {
                    "method": "GET",
		    "path": "/:key/members",
                    "description": "Lists the members of this team",
		    "parameters": [
			{ "name": "user_guid", "type": "uuid", "required": false },
                        { "name": "limit", "type": "integer", "default": 25, "description": "The number of records to return", "minimum": 0, "maximum": 100 },
                        { "name": "offset", "type": "integer", "default": 0, "description": "Used to paginate. First page of results is 0.", "minimum": 0 }
		    ],
                    "responses": {
                        "200": { "type": "[team_member]" }
                    }
                },

                {
                    "method": "PUT",
		    "path": "/:key/members/:user_guid",
                    "description": "Adds the specified user to this team",
		    "parameters": [
			{ "name": "user_guid", "type": "uuid" }
		    ],
                    "responses": {
                        "201": { "type": "team_member" },
                        "409": { "type": "[error]" }
                    }
                },

                {
                    "method": "DELETE",
		    "path": "/:key/members/:user_guid",
                    "description": "Removes this user from this team",
		    "parameters": [
			{ "name": "user_guid", "type": "uuid" }
		    ]
                }

	    ]
	},

    "statistic":{
	"path": "/:org/statistics",
        "operations": [
            {   
                "method": "GET",
                "description": "Retrieve team statistics for all or one team.",
                "parameters": [
                    { "name": "team_key", "type": "string", "description": "Find stats for this team. Leave blank to retrieve all teams", "required": false},
                    { "name": "number_hours", "type": "integer", "description": "Number of hours in the past to retrieve requested statistics. Default is 1 week.", "default": 168}
                ],
                "responses": {
                    "200": {"type": "[statistic]"},
                    "404": { "type": "unit", "description": "404 if org is not found / or user does not have access to the specified org" }
                }
            }
        ]

    },

        "incident": {
	    "path": "/:org/incidents",
            "operations": [
                {
                    "method": "GET",
                    "description": "Search all incidents. Results are always paginated.",
                    "parameters": [
                        { "name": "id", "type": "long", "description": "Find incident with this id. Exact match", "required": false },
                        { "name": "team_key", "type": "string", "description": "Find incidents for which this team is responsible. Exact match", "required": false },
                        { "name": "has_team", "type": "boolean", "description": "If true, find incidents with a team assigned to them. If false, find incidents w/out a team", "required": false },
                        { "name": "has_plan", "type": "boolean", "description": "If true, find incidents with a plan. If false, find incidents w/out a plan", "required": false },
                        { "name": "has_grade", "type": "boolean", "description": "If true, find incidents with a grade. If false, find incidents w/out a grade", "required": false },
                        { "name": "limit", "type": "integer", "default": 25, "description": "The number of records to return", "minimum": 0, "maximum": 100 },
                        { "name": "offset", "type": "integer", "default": 0, "description": "Used to paginate. First page of results is 0.", "minimum": 0 }
                    ],
                    "responses": {
                        "200": { "type": "[incident]" },
                        "404": { "type": "unit", "description": "404 if org is not found / or user does not have access to the specified org" }
                    }
                },

                {
                    "method": "GET",
                    "description": "Returns information about the incident with this specific id.",
                    "path": "/:id",
                    "responses": {
                        "200": { "type": "incident" },
                        "404": { "type": "unit" }
                    }
                },

                {
                    "method": "POST",
                    "description": "Create a new incident.",
                    "body": { "type": "incident_form" },
                    "responses": {
                        "201": { "type": "incident" },
                        "409": { "type": "[error]" }
                    }
                },

                {
                    "method": "PUT",
		    "path": "/:id",
                    "description": "Updates an incident.",
                    "body": { "type": "incident_form" },
                    "responses": {
                        "200": { "type": "incident" },
                        "409": { "type": "[error]" }
                    }
                },

		{
		    "method": "DELETE",
                    "path": "/:id"
		}

            ]
        },

	"plan": {
	    "path": "/:org/plans",
	    "operations": [
		{
		    "method": "GET",
                    "description": "Search all plans. Results are always paginated.",
                    "parameters": [
                        { "name": "id", "type": "long", "description": "Find plan with this id. Exact match", "required": false },
                        { "name": "incident_id", "type": "long", "description": "Find plan for this incident_id", "required": false },
                        { "name": "team_key", "type": "string", "description": "Find all plans for requested team", "required": false},
                        { "name": "limit", "type": "integer", "default": 25, "description": "The number of records to return", "minimum": 0, "maximum": 100 },
                        { "name": "offset", "type": "integer", "default": 0, "description": "Used to paginate. First page of results is 0.", "minimum": 0 }
                    ],
                    "responses": {
                        "200": { "type": "[plan]" },
                        "404": { "type": "unit", "description": "404 if org is not found / or user does not have access to the specified org" }
                    }
                },

		{
		    "method": "POST",
                    "description": "Create a plan.",
		    "body": { "type": "plan_form" },
                    "responses": {
                        "201": { "type": "plan" },
                        "409": { "type": "[error]" }
                    }
                },

		{
		    "method": "PUT",
                    "description": "Update a plan.",
		    "path": "/:id",
		    "body": { "type": "plan_form" },
                    "responses": {
                        "200": { "type": "plan" },
                        "409": { "type": "[error]" }
                    }
                },

		{
		    "method": "PUT",
                    "description": "Update the grade assigned to a plan.",
		    "path": "/:id/grade",
                    "parameters": [
                        { "name": "grade", "type": "integer" }
                    ],
                    "responses": {
                        "200": { "type": "plan" },
                        "409": { "type": "[error]" }
                    }
                },

		{
		    "method": "GET",
                    "description": "Get a single plan.",
                    "path": "/:id",
                    "responses": {
                        "200": { "type": "plan" },
                        "404": { "type": "unit" }
                    }
                },

		{
		    "method": "DELETE",
                    "description": "Delete a plan.",
                    "path": "/:id"
                }

	    ]
	},

	"meeting": {
	    "path": "/:org/meetings",
	    "operations": [
		{
		    "method": "GET",
                    "description": "Search all meetings. Results are always paginated.",
                    "parameters": [
                        { "name": "id", "type": "long", "description": "Find meeting with this id. Exact match", "required": false },
                        { "name": "incident_id", "type": "long", "description": "Find meetings where this incident_id is on the agenda", "required": false },
                        { "name": "agenda_item_id", "type": "long", "description": "Find meeting based on this agenda item", "required": false },
                        { "name": "is_adjourned", "type": "boolean", "description": "Find meetings that have or have not been adjourned", "required": false },
                        { "name": "is_upcoming", "type": "boolean", "description": "Find meetings that are upcoming (true) or have passed (false)", "required": false },
                        { "name": "order_by", "type": "string", "description": "field_name:direction", "required": false, "required": false },
                        { "name": "limit", "type": "integer", "default": 25, "description": "The number of records to return", "minimum": 0, "maximum": 100 },
                        { "name": "offset", "type": "integer", "default": 0, "description": "Used to paginate. First page of results is 0.", "minimum": 0 }
                    ],
                    "responses": {
                        "200": { "type": "[meeting]" },
                        "404": { "type": "unit", "description": "404 if org is not found / or user does not have access to the specified org" }
                    }
                },

		{
		    "method": "GET",
		    "path": "/:id",
                    "responses": {
                        "200": { "type": "meeting" },
                        "404": { "type": "unit" }
                    }
                },


		{
		    "description": "Creates a meeting. In general meetings are created automatically",
		    "method": "POST",
		    "body": { "type": "meeting_form" },
                    "responses": {
                        "201": { "type": "meeting" },
                        "409": { "type": "[error]" }
                    }
                },

		{
		    "description": "Records that a meeting has been adjourned. Will return a validation error if the meeting had previously been adjourned",
		    "method": "POST",
		    "path": "/:id/adjourn",
		    "body": { "type": "adjourn_form" },
                    "responses": {
                        "200": { "type": "meeting" },
                        "409": { "type": "[error]" }
                    }
                },

		{
		    "path": "/:id",
		    "method": "DELETE"
                },

		{
		    "method": "GET",
		    "path": "/:id/pager/:incident_id",
		    "parameters": [
                        { "name": "incident_id", "type": "long", "description": "The incident ID that you are looking at. Pager information will be returned including the incident prior to and after this incident, if available." }
		    ],
		    "description": "Get information on paging through incidents (e.g. the prior or next incident in a given meeting)",
                    "responses": {
                        "200": { "type": "meeting_pager" },
                        "404": { "type": "unit" }
                    }
                }

	    ]
	},

	"agenda_item": {
	    "path": "/:org/agenda_items",

	    "operations": [
		{
		    "method": "GET",
                    "description": "Search agenda items for a given meeting. Results are always paginated.",
                    "parameters": [
                        { "name": "id", "type": "long", "description": "Find agenda items with this id", "required": false },
                        { "name": "meeting_id", "type": "long", "description": "Find agenda items for this meeting", "required": false },
                        { "name": "incident_id", "type": "long", "description": "Find agenda items for this incident", "required": false },
                        { "name": "team_key", "type": "string", "description": "Find agenda items for this team", "required": false },
                        { "name": "user_guid", "type": "uuid", "description": "Find agenda items filtered by the teams this user is on.", "required": false },
                        { "name": "is_adjourned", "type": "boolean", "description": "If false, limit to agenda items for meetings that have not yet been adjourned. If true, limit to agenda items for meetings that have been adjourned", "required": false },
                        { "name": "task", "type": "task", "description": "Find agenda items with this task", "required": false },
                        { "name": "limit", "type": "integer", "default": 25, "description": "The number of records to return", "minimum": 0, "maximum": 100 },
                        { "name": "offset", "type": "integer", "default": 0, "description": "Used to paginate. First page of results is 0.", "minimum": 0 }
                    ],
                    "responses": {
                        "200": { "type": "[agenda_item]" },
                        "404": { "type": "unit", "description": "404 if org is not found / or user does not have access to the specified org" }
                    }
                },

		{
		    "method": "GET",
		    "path": "/:id",
                    "responses": {
                        "200": { "type": "agenda_item" },
                        "404": { "type": "unit" }
                    }
                },


		{
		    "description": "Creates an agenda item for this meeting.",
		    "method": "POST",
		    "body": { "type": "agenda_item_form" },
                    "responses": {
                        "201": { "type": "agenda_item" },
                        "409": { "type": "[error]" }
                    }
                },

		{
		    "path": "/:id",
		    "method": "DELETE"
                }

	    ]
	},

	"user": {
            "operations": [
                {
                    "method": "GET",
                    "description": "Search for a specific user. You must specify at least 1 parameter - either a guid or email - and will receive back either 0 or 1 users.",
                    "parameters": [
                        { "name": "guid", "type": "uuid", "description": "Find user with this guid. Exact match", "required": false },
                        { "name": "email", "type": "string", "description": "Find user with this email address. Case in-sensitive. Exact match", "required": false }
                    ],
                    "responses": {
                        "200": { "type": "[user]" }
                    }
                },

                {
                    "method": "GET",
                    "description": "Returns information about the user with this guid.",
                    "path": "/:guid",
                    "responses": {
                        "200": { "type": "user" },
                        "404": { "type": "unit" }
                    }
                },

		{
		    "method": "POST",
		    "path": "/authenticate",
		    "description": "Used to authenticate a user with an email address and password. Successful authentication returns an instance of the user model. Failed authorizations of any kind are returned as a generic error with code user_authorization_failed.",
		    "body": { "type": "authentication_form" },
                    "responses": {
                        "200": { "type": "user" },
                        "409": { "type": "[error]" }
		    }
		},

                {
                    "method": "POST",
                    "description": "Create a new user.",
                    "body": { "type": "user_form" },
                    "responses": {
                        "201": { "type": "user" },
                        "409": { "type": "[error]" }
                    }
                }
            ]
        },

	"subscription": {
	    "operations": [
                {
                    "method": "GET",
                    "description": "Search for a specific subscription.",
                    "parameters": [
                        { "name": "id", "type": "long", "description": "Find the subscription with this id.", "required": false },
                        { "name": "organization_key", "type": "string", "description": "Find subscriptions for this organization.", "required": false },
                        { "name": "user_guid", "type": "uuid", "description": "Find subscriptions for this user.", "required": false },
                        { "name": "publication", "type": "publication", "description": "Find subscriptions for this publication.", "required": false },
                        { "name": "limit", "type": "integer", "default": 25, "description": "The number of records to return", "minimum": 0, "maximum": 100 },
                        { "name": "offset", "type": "integer", "default": 0, "description": "Used to paginate. First page of results is 0.", "minimum": 0 }
                    ],
                    "responses": {
                        "200": { "type": "[subscription]" }
                    }
                },

                {
                    "method": "GET",
                    "description": "Returns information about this subscription.",
                    "path": "/:id",
                    "responses": {
                        "200": { "type": "subscription" },
                        "404": { "type": "unit" }
                    }
                },

                {
                    "method": "POST",
                    "description": "Create a new subscription.",
                    "body": { "type": "subscription_form" },
                    "responses": {
                        "201": { "type": "subscription" },
                        "409": { "type": "[error]" }
                    }
                },

                {
                    "method": "DELETE",
		    "path": "/:id"
                }
            ]
        },

	"email_message": {
	    "path": "/:org/email_messages",
	    "operations": [
		{
		    "method": "GET",
		    "path": "/meeting_adjourned/:meeting_id",
		    "parameters": [
			{ "name": "meeting_id", "type": "long" }
		    ],
		    "responses": {
			"200": { "type": "email_message" },
                        "404": { "type": "unit" }
		    }
		}
	    ]
	},

	"external_service": {
	    "path": "/:org/external_services",

	    "operations": [
		{
		    "method": "GET",
		    "parameters": [
			{ "name": "id", "type": "long", "required": false },
			{ "name": "name", "type": "external_service_name", "required": false },
                        { "name": "limit", "type": "integer", "default": 25, "description": "The number of records to return", "minimum": 0, "maximum": 100 },
                        { "name": "offset", "type": "integer", "default": 0, "description": "Used to paginate. First page of results is 0.", "minimum": 0 }
		    ],
		    "responses": {
			"200": { "type": "[external_service]" },
                        "404": { "type": "unit", "description": "404 if org is not found / or user does not have access to the specified org" }
		    }
		},

		{
		    "method": "GET",
		    "path": "/:id",
		    "responses": {
			"200": { "type": "external_service" },
                        "404": { "type": "unit" }
		    }
		},

		{
		    "method": "POST",
		    "body": { "type": "external_service_form" },
		    "responses": {
			"201": { "type": "external_service" },
			"409": { "type": "[error]" }
		    }
		},

		{
		    "method": "DELETE",
		    "path": "/:id"
		}

	    ]

	},

	"incident_organization_change": {
	    "operations": [
		{
		    "method": "POST",
		    "body": { "type": "incident_organization_change" },
		    "responses": {
			"200": { "type": "incident" },
			"409": { "type": "[error]" }
		    }
		}
	    ]
	}
    }
}
